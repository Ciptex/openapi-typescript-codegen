interface SignAWSPayload {
    credentials: Credentials
    url: URL, 
    options: ApiRequestOptions, 
    headers: { [key: string]: any }, 
    body?: any 
}

async function signAWS({ credentials, url, options, headers, body }: SignAWSPayload): Promise<any> {
    if(!process.env.AWS_REGION || !credentials.AccessKeyId || !credentials.SecretAccessKey || !credentials.SessionToken) {
        throw new Error("Missing AWS Credentials");
    }
    
    const sigv4 = new SignatureV4({
        service: 'execute-api',
        region: process.env.AWS_REGION,
        credentials: {
            accessKeyId: credentials.AccessKeyId,
            secretAccessKey: credentials.SecretAccessKey,
            sessionToken: credentials.SessionToken,
        },
        sha256: Sha256,
    });

    return sigv4.sign({
        method: options.method,
        hostname: url.host,
        path: url.pathname,
        protocol: url.protocol,
        query: Object.fromEntries(url.searchParams),
        headers: headers,
        body: JSON.stringify(body)
  });
}

interface AssumeAWSRolePayload {
    awsRoleArn: string | Resolver<string>;
}

async function assumeAWSRole({ awsRoleArn }: AssumeAWSRolePayload, options: ApiRequestOptions): Promise<AssumeRoleCommandOutput> {
    const arn = await resolve(options, awsRoleArn);
    
    if(!process.env.AWS_REGION || !arn) {
        throw new Error("Missing AWS Credentials");
    }

    const stsClient = new STSClient({ region: process.env.AWS_REGION });
    const command = new AssumeRoleCommand({
        RoleArn: arn,
        RoleSessionName: "session1",
        DurationSeconds: 900
    });

    return stsClient.send(command);
}