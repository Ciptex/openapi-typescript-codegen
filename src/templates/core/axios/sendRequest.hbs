const sendRequest = async <T>(
    options: ApiRequestOptions,
    url: string,
    formData: FormData | undefined,
    body: any,
    headers: Record<string, string>,
    onCancel: OnCancel,
    openApiConfig: OpenAPIConfig2
): Promise<AxiosResponse<T>> => {
    const source = axios.CancelToken.source();
    const newUrl = openApiConfig.edge ? url.replace("{edge}", openApiConfig.edge) : url;

    const requestConfig: AxiosRequestConfig = {
        url: newUrl,
        headers,
        data: body ?? formData,
        method: options.method,
        cancelToken: source.token,
        validateStatus: () => true,
        withCredentials: (options.cookies && Object.keys(options.cookies).length > 0) ? true : undefined
    };

    onCancel(() => source.cancel('The user aborted a request.'));

	try {
		return await axios.request(requestConfig);
	} catch (error) {
		const axiosError = error as AxiosError<T>;
		if (axiosError.response) {
			return axiosError.response;
		}
		throw error;
	}
};
