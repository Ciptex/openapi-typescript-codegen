{{>header}}

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import FormData from 'form-data';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig2 } from './OpenAPI';
import { BaseHttpRequest } from './BaseHttpRequest';

{{#if @root.awsSign}}
import { SignatureV4 } from '@aws-sdk/signature-v4';
import { Sha256 } from '@aws-crypto/sha256-js';
import { AssumeRoleCommand, STSClient, AssumeRoleCommandOutput, Credentials } from "@aws-sdk/client-sts";

{{>functions/signAWS}}
{{/if}}


{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/isSuccess}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>axios/getHeaders}}


{{>axios/getRequestBody}}


{{>axios/sendRequest}}


{{>axios/getResponseHeader}}


{{>axios/getResponseBody}}


{{>functions/catchErrors}}


export class AxiosHttpRequest extends BaseHttpRequest {
    constructor(openApiConfig: OpenAPIConfig2) {
        super(openApiConfig);
    }

    /**
    * Request using axios client
    * @param options The request options from the the service
    * @returns ApiResult
    * @throws ApiError
    */
    request<T>(options: ApiRequestOptions): CancelablePromise<T> {
        return new CancelablePromise(async (resolve, reject, onCancel) => {
            try {
                const url = getUrl(options, this.openApiConfig);
                const formData = getFormData(options);
                const body = getRequestBody(options);
                const headers = await getHeaders(options, this.openApiConfig, url);

                {{#if @root.awsSign}}
                let awsSigned = { headers: {} };
                if(this.openApiConfig.awsRoleArn) {
                    const awsCredentails: AssumeRoleCommandOutput = await assumeAWSRole({ awsRoleArn: this.openApiConfig.awsRoleArn }, options);

                    if(!awsCredentails.Credentials) {
                        throw new Error("Invalid AWS Role Arn");
                    }
                    
                    awsSigned = await signAWS({ 
                        credentials: awsCredentails.Credentials, 
                        url, 
                        options, 
                        headers, 
                        body: body ?? formData 
                    });
                }
                else {
                    awsSigned = await signAWS({ 
                        credentials: {
                            AccessKeyId: process.env.AWS_ACCESS_KEY_ID,
                            SecretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
                            SessionToken: process.env.AWS_SESSION_TOKEN,
                            Expiration: new Date()
                        }, 
                        url, 
                        options, 
                        headers, 
                        body: body ?? formData 
                    });
                }
                    
                {{/if}}

                if (!onCancel.isCancelled) {
                    const response = await sendRequest(options, url, formData, body, {{#if @root.awsSign}}awsSigned.headers{{else}}headers{{/if}}, onCancel, this.openApiConfig);
                    const responseBody = getResponseBody(response);
                    const responseHeader = getResponseHeader(response, options.responseHeader);

                    const result: ApiResult = {
                        url: url.toString(),
                        ok: isSuccess(response.status),
                        status: response.status,
                        statusText: response.statusText,
                        body: responseHeader || responseBody,
                    };

                    catchErrors(options, result);

                    resolve(result.body);
                }
            } catch (error) {
                reject(error);
            }
        });
    }
}
