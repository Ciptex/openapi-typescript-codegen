async function getHeaders(options: ApiRequestOptions, config: OpenAPIConfig2, formData?: FormData): Promise<Record<string, string>> {
    const token = await resolve(options, config.token);
    const accountSid = await resolve(options, config.accountSid);
    const authToken = await resolve(options, config.authToken);

    const headers = Object.entries({
        Accept: 'application/json',
        ...options.headers,
    })
    .filter(([_, value]) => isDefined(value))
    .reduce((headers, [key, value]) => ({
        ...headers,
        [key]: String(value),
    }), {} as Record<string, string>);

    if (isStringWithValue(accountSid) && isStringWithValue(token)) {
        headers['Authorization'] = `Flex ${accountSid}:${token}`;
    }

    if (!isStringWithValue(accountSid) && isStringWithValue(token)) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    if (isStringWithValue(accountSid) && isStringWithValue(authToken)) {
        const credentials = base64(`${accountSid}:${authToken}`);
        headers['Authorization'] = `Basic ${credentials}`;
    }
    
	if (options.body) {
		if (options.mediaType) {
			headers['Content-Type'] = options.mediaType;
		} else if (isBlob(options.body)) {
			headers['Content-Type'] = options.body.type || 'application/octet-stream';
		} else if (isString(options.body)) {
			headers['Content-Type'] = 'text/plain';
		} else if (!isFormData(options.body)) {
			headers['Content-Type'] = 'application/json';
		}
	}

	return headers;
};
