#---
#title: Notified Conference Booking API
#description: Notified Conference Booking API
openapi: "3.0.1"
info:
  title: "notified-booking-api"
  version: "1.0"
  description: "The Notified Conference Booking API allows you to book and schedule Ciptex Conferences"
  termsOfService: https://www.ciptex.com/legal/race-terms
  contact:
    name: API Support
    url: https://support.ciptex.com
x-tagGroups:
  - name: Conference API
    tags:
      - Booking
      - Conference
      - Participant
x-maturity:
- description: This product is Beta.
  name: Beta
servers:
  - url: https://notified-booking-api.london.ciptex.io
    description: London Endpoint
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
  - url: https://notified-booking-api.frankfurt.ciptex.io
    description: Frankfurt Endpoint
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
  - url: https://notified-booking-api.ashburn.ciptex.io
    description: US East Coast (Virginia) Endpoint
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
  - url: https://notified-booking-api.umatilla.ciptex.io
    description: US West Coast (Oregon) Endpoint
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
paths:
  /booking:
    get:
      summary: "List Bookings"
      description: "Retrieve a list of Bookings"
      operationId: "ListBooking"
      tags:
        - Booking
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [listBookingFunction, Arn]
        connectionType: "INTERNET"
    post:
      summary: "Create New Booking"
      description: "Create a new Booking"
      operationId: "CreateBooking"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
            example:
              event:
                id: 101
                uid: abcd1234
                name: Quarterly Earnings Event
                usage: PRODUCTION
                startDate: "2021-11-17T20:25:33.650Z"
                duration: 3600
                serviceLevel: MANAGED
                url: https://example.com/app/console/event/101
              account:
                id: 11
                name: Acme Corp
                type: MANAGED
                region: AMER
              dialInGroups:
                - US
              options:
                hasQaSession: true
                hasVideo: true
                language: en
              leader:
                firstName: John
                lastName: Doe
                email: john.doe@acme.com
                phone: "+16175555555"
              organizer:
                firstName: Jane
                lastName: Kim
                email: jane.kim@acme.com
                phone: "+15085555555"
              registrationFields:
                - name: firstName
                  type: text
                  label: First Name
                  isRequired: false
                  characterLimit: 255
                - name: lastName
                  type: text
                  label: Last Name
                  isRequired: false
                  characterLimit: 255
              callbacks:
                bookingCallbackUrl: https://user:password@example.com/app/services/ciptex-telco/booking-callback
                registrationNotificationUrl: https://user:password@example.com/app/services/ciptex-telco/registration-notification
                reportingUrl: https://user:password@example.com/app/services/ciptex-telco/reporting
      callbacks:
        statusCallback:
          "{$request.body#/statusCallbackURL}":
            post:
              requestBody:
                description: Status Callback payload
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/StatusCallbackPayload"
              responses:
                200:
                  description: callback successfully processed
        reportCallback:
          "{$request.body#/reportCallbackURL}":
            post:
              requestBody:
                description: Report Callback payload
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/ReportCallbackPayload"
              responses:
                200:
                  description: callback successfully processed
        participantCallback:
          "{$request.body#/participantCallbackURL}":
            post:
              requestBody:
                description: Report Callback payload
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/ParticipantCallbackPayload"
              responses:
                200:
                  description: callback successfully processed
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [createBookingFunction, Arn]
        connectionType: "INTERNET"
  /booking/{BookingId}:
    get:
      summary: "Fetch Booking"
      description: "Get a specific Booking"
      operationId: "FetchBooking"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Booking
      parameters:
        - $ref: "#/components/parameters/BookingId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        404:
          $ref: "#/components/responses/404"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [getBookingFunction, Arn]
        connectionType: "INTERNET"
    patch:
      summary: "Update Booking"
      description: "Update Booking"
      operationId: "UpdateBooking"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Booking
      parameters:
        - $ref: "#/components/parameters/BookingId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [updateBookingFunction, Arn]
        connectionType: "INTERNET"
    delete:
      summary: "Remove Booking"
      description: "Remove Booking"
      operationId: "RemoveBooking"
      x-maturity:
        - Beta
      security:
        - BasicAuthorizer: []
      tags:
        - Booking
      parameters:
        - $ref: "#/components/parameters/BookingId"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [deleteBookingFunction, Arn]
        connectionType: "INTERNET"
  /booking/{BookingId}/conference:
    get:
      summary: "List Conference's attached to a Booking"
      description: "Retrieve a list of Conference's attached to a Booking"
      operationId: "ListConference"
      parameters:
        - $ref: "#/components/parameters/BookingId"
      tags:
        - Conference
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conference"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [listConferenceFunction, Arn]
        connectionType: "INTERNET"
    post:
      summary: "Create New Conference"
      description: "Create a new Conference"
      operationId: "CreateConference"
      parameters:
        - $ref: "#/components/parameters/BookingId"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Conference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Conference"
            example:
              conferenceName: "My Conference"
              startDate: "2021-11-10T11:30:12.282Z"
              endDate: "2021-11-10T15:30:12.282Z"
              conferenceType: "testRoom"
              mediaRegion: "gll"
              statusCallbackURL: "https://username:password@example.com/conference-status-callback-url"
      callbacks:
        statusCallback:
          "{$request.body#/statusCallbackURL}":
            post:
              requestBody:
                description: Status Callback payload
                content: 
                  application/json:
                    schema:
                      $ref: "#/components/schemas/StatusCallbackPayload"
              responses:
                200:
                  description: callback successfully processed 
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conference"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [createConferenceFunction, Arn]
        connectionType: "INTERNET"
  /booking/{BookingId}/conference/{ConferenceId}:
    get:
      summary: "Fetch Conference"
      description: "Fetch a specific Conference"
      operationId: "FetchConference"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Conference
      parameters:
        - $ref: "#/components/parameters/BookingId"
        - $ref: "#/components/parameters/ConferenceId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Conference"
        404:
          $ref: "#/components/responses/404"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [getConferenceFunction, Arn]
        connectionType: "INTERNET"
    patch:
      summary: "Update Conference"
      description: "Update Conference"
      operationId: "UpdateConference"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Conference
      parameters:
        - $ref: "#/components/parameters/BookingId"
        - $ref: "#/components/parameters/ConferenceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Conference"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conference"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [updateConferenceFunction, Arn]
        connectionType: "INTERNET"
    delete:
      summary: "Remove Conference"
      description: "Remove Conference"
      operationId: "RemoveConference"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Conference
      parameters:
        - $ref: "#/components/parameters/BookingId"
        - $ref: "#/components/parameters/ConferenceId"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [deleteConferenceFunction, Arn]
        connectionType: "INTERNET"
  /booking/{BookingId}/participant:
    get:
      summary: "Retrieve a list of Participant's attached to a Booking"
      description: "Retrieve a list of Participant's attached to a Booking"
      operationId: "ListParticipant"
      parameters:
        - $ref: "#/components/parameters/BookingId"
      tags:
        - Participant
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Participant"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [listParticipantFunction, Arn]
        connectionType: "INTERNET"
    post:
      summary: "Create New Participant"
      description: "Create a new Participant"
      operationId: "CreateParticipant"
      parameters:
        - $ref: "#/components/parameters/BookingId"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Participant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Participant"
            example:
              registrationData:
                firstName: bob
                lastName: bert
                email: email@email.com
                investor: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [createParticipantFunction, Arn]
        connectionType: "INTERNET"
  /booking/{BookingId}/participant/{ParticipantId}:
    get:
      summary: "Fetch Participant"
      description: "Fetch a specific Participant"
      operationId: "FetchParticipant"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Participant
      parameters:
        - $ref: "#/components/parameters/BookingId"
        - $ref: "#/components/parameters/ParticipantId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Participant"
        404:
          $ref: "#/components/responses/404"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [getParticipantFunction, Arn]
        connectionType: "INTERNET"
    patch:
      summary: "Update Participant"
      description: "Update Participant"
      operationId: "UpdateParticipant"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Participant
      parameters:
        - $ref: "#/components/parameters/BookingId"
        - $ref: "#/components/parameters/ParticipantId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Participant"
            example:
              registrationData:
                firstName: bob
                lastName: bert
                email: email@email.com
                investor: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [updateParticipantFunction, Arn]
        connectionType: "INTERNET"
    delete:
      summary: "Remove Participant"
      description: "Remove Participant"
      operationId: "RemoveParticipant"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Participant
      parameters:
        - $ref: "#/components/parameters/BookingId"
        - $ref: "#/components/parameters/ParticipantId"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [deleteParticipantFunction, Arn]
        connectionType: "INTERNET"
  /participant/verify:
    post:
      summary: "Verify Participants Pin"
      description: "Verify if Participants Pin is valid and return Participants PID"
      operationId: "VerifyParticipant"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      tags:
        - Participant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantVerifyInput"
            example:
              pin: 123456
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantVerify"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [verifyParticipantFunction, Arn]
        connectionType: "INTERNET"
components:
  parameters:
    BookingId:
      in: path
      name: BookingId
      schema:
        type: string
        pattern: ^BI[0-9a-fA-F]{32}$
        maxLength: 34
        minLength: 34
      required: true
      description: BID of the Booking
      allowReserved: false
      allowEmptyValue: false
      example: BI9f52a65797f0db022ce35f8a274c93a1
    ConferenceId:
      in: path
      name: ConferenceId
      schema:
        type: string
        pattern: ^CI[0-9a-fA-F]{32}$
        maxLength: 34
        minLength: 34
      required: true
      description: CID of the Conference
      allowReserved: false
      allowEmptyValue: false
      example: CI9f52a65797f0dba42ce3ff8a274c93a1
    ParticipantId:
      in: path
      name: ParticipantId
      schema:
        type: string
        pattern: ^PI[0-9a-fA-F]{32}$
        maxLength: 34
        minLength: 34
      required: true
      description: The PID of the Participant
      allowReserved: false
      allowEmptyValue: false
      example: PI9f52a65797f0db022ce35f8a274c93a1
  responses:
    404:
      description: Not Found
    400:
      description: Bad Request
    401:
      description: Unauthorized
      headers:
        WWW_Authenticate:
          schema:
            type: string
    500:
      description: Internal Server Error
  schemas:
    ParticipantVerifyInput:
      type: object
      description: participant verification parameters
      required:
        - pin
      properties:
        pin:
          type: number
          format: int32
          minimum: 100000
          maximum: 999999
          description: Participants Login Pin
      additionalProperties: false
    ParticipantVerify:
      allOf:
      - type: object
        description: participant verification result
        readOnly: true
        required:
          - accountSid
          - bookingId
          - conferenceId
          - participantId
        properties:
          accountSid:
            type: string
            description: The SID of the Account that created the resource
            maxLength: 34
            minLength: 34
            pattern: ^AC[0-9a-fA-F]{32}$
            readOnly: true
            example: AC5004b62bf34d23e0807028c16f7cd4a5
          bookingId:
            type: string
            description: The BID of the Booking
            maxLength: 34
            minLength: 34
            pattern: ^BI[0-9a-fA-F]{32}$
            readOnly: true
            example: BI9f52a65797f0db022ce35f8a274c93a1
          participantId:
            type: string
            description: The BID of the Booking
            maxLength: 34
            minLength: 34
            pattern: ^PI[0-9a-fA-F]{32}$
            readOnly: true
            example: PI9f52a65797f0db022ce35f8a274c93a1
          conferenceId:
            type: string
            description: The CID of the Main Conference
            maxLength: 34
            minLength: 34
            pattern: ^CI[0-9a-fA-F]{32}$
            readOnly: true
            example: CIcb5efD0Ebcfacbfad9CBaeb9bDCF7A1b
          identity:
            type: string
            description: Friendly Participant Identity
            readOnly: true
            example: "email@email.com"
          role:
            type: string
            description: Users Role
            enum:
              - host
              - speaker
              - viewer
            readOnly: true
        additionalProperties: false
      - $ref: "#/components/schemas/MetaDataLinks"
    Account:
      type: object
      description: representation of mmc account information
      properties:
        id:
          type: integer
          description: Account Service Token (unique across all MMC installs)
        name:
          type: string
          description: MMC account Name
        type:
          type: string
          description: Reseller, Managed, etc
        region:
          type: string
          description: AMER, EMEA, APAC
      additionalProperties: false
    Contact:
      type: object
      properties:
        firstName:
          type: string
          description: |
            *`PII MTL: 30 DAYS`*
        lastName:
          type: string
          description: |
              *`PII MTL: 30 DAYS`*
        email:
          type: string
          description: |
              *`PII MTL: 30 DAYS`*
        phone:
          type: string
          description: |
              *`PII MTL: 30 DAYS`*
      additionalProperties: false
    Event:
      type: object
      description: representation of mmc event information
      required:
        - id
        - name
        - startDate
        - duration
      properties:
        id:
          type: integer
          description: Event Service Token (unique across all MMC installs). For use in booking conflict resolution.
        uid:
          type: string
          description: Display-friendly identifier for end-user UI
        name:
          type: string
        usage:
          type: string
          description: Production, Demo, Test
        startDate:
          type: string
          format: date-time
          description: Start datetime of the event
        duration:
          type: integer
          format: int32
          description: in seconds
        serviceLevel:
          type: string
          description: Full-service, self-service
        isHighAlert:
          type: boolean
          description: If the event requires special attention
          default: false
        url:
          type: string
          format: uri
          description: Link to the event
      additionalProperties: false
    DeletedEventPayload:
      type: object
      readOnly: true
      required:
        - accountSid
        - bookingId
        - deleted
      properties:
        accountSid:
          type: string
          description: The SID of the Account that created the resource
          maxLength: 34
          minLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          readOnly: true
          example: AC5004b62bf34d23e0807028c16f7cd4a5
        bookingId:
          type: string
          description: The BID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^BI[0-9a-fA-F]{32}$
          readOnly: true
          example: BI9f52a65797f0db022ce35f8a274c93a1
        conferenceId:
          type: string
          description: The CID of the Conference
          maxLength: 34
          minLength: 34
          pattern: ^CI[0-9a-fA-F]{32}$
          readOnly: true
          example: CI9f52a65797f0dba42ce3ff8a274c93a1
        participantId:
          type: string
          description: The BID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^PI[0-9a-fA-F]{32}$
          readOnly: true
          example: PI9f52a65797f0db022ce35f8a274c93a1
        deleted:
          type: boolean
          readOnly: true
          example: true
      additionalProperties: false
    StatusCallbackPayload:
      type: object
      readOnly: true
      properties:
        id:
          type: string
        source:
          type: string
        type:
          type: string
          enum:
            - com.ciptex.notified.booking.created
            - com.ciptex.notified.booking.updated
            - com.ciptex.notified.booking.canceled
            - com.ciptex.notified.booking.deleted
            - com.ciptex.notified.booking.completed
            - com.ciptex.notified.conference.created
            - com.ciptex.notified.conference.updated
            - com.ciptex.notified.conference.deleted
            - com.ciptex.notified.conference.started
            - com.ciptex.notified.conference.ended
        specversion:
          type: string
        data:
          $ref: "#/components/schemas/StatusCallbackPayloadEventData"
      additionalProperties: false
    StatusCallbackPayloadEventData:
      anyOf:
        - $ref: "#/components/schemas/Booking"
        - $ref: "#/components/schemas/Conference"
        - $ref: "#/components/schemas/DeletedEventPayload"
    ParticipantCallbackPayload:
      type: object
      readOnly: true
      properties:
        id:
          type: string
        source:
          type: string
        type:
          type: string
          enum:
            - com.ciptex.notified.participant.created
            - com.ciptex.notified.participant.updated
            - com.ciptex.notified.participant.deleted
            - com.ciptex.notified.participant.connected
            - com.ciptex.notified.participant.disconnected
            - com.ciptex.notified.participant.activity.update
        specVersion:
          type: string
        data:
          $ref: "#/components/schemas/ParticipantCallbackPayloadEventData"
      additionalProperties: false
    ParticipantCallbackPayloadEventData:
      anyOf:
        - $ref: "#/components/schemas/Participant"
    ReportCallbackPayload:
      type: object
      readOnly: true
      properties:
        id:
          type: string
        source:
          type: string
        type:
          type: string
          enum:
            - com.ciptex.booking.completed
        specVersion:
          type: string
        data:
          $ref: "#/components/schemas/ReportCallbackPayloadEventData"
      additionalProperties: false
    ReportCallbackPayloadEventData:
      anyOf:
        - $ref: "#/components/schemas/CompletedReport"
        
    ParticipantHeader:
      type: object
      readOnly: true
      required:
        - accountSid
        - bookingId
        - participantId
      properties:
        accountSid:
          type: string
          description: The SID of the Account that created the resource
          maxLength: 34
          minLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          readOnly: true
          example: AC5004b62bf34d23e0807028c16f7cd4a5
        bookingId:
          type: string
          description: The ID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^BI[0-9a-fA-F]{32}$
          readOnly: true
          example: BI9f52a65797f0db022ce35f8a274c93a1
        participantId:
          type: string
          description: The BID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^PI[0-9a-fA-F]{32}$
          readOnly: true
          example: PI9f52a65797f0db022ce35f8a274c93a1
      additionalProperties: false
    
    Participant:
      allOf:
      - $ref: "#/components/schemas/ParticipantHeader"
      - $ref: "#/components/schemas/ParticipantDetail"
      - $ref: "#/components/schemas/MetaDataLinks"
      
    ParticipantDetail:
      type: object
      description: Participant Details
      required:
        - registrationData
      properties:
        registrationData:
          type: object
        pin:
          type: number
          format: int32
          minimum: 100000
          maximum: 999999
          readOnly: true
          description: Login Pin. This is only returned on the inital POST Request
      additionalProperties: false
      
    CompletedReport:
      type: object
      readOnly: true
      properties:
        accountSid:
          type: string
          description: The SID of the Account that created the resource
          maxLength: 34
          minLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          readOnly: true
          example: AC5004b62bf34d23e0807028c16f7cd4a5
        bookingId:
          type: string
          description: The BID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^BI[0-9a-fA-F]{32}$
          readOnly: true
          example: BI9f52a65797f0db022ce35f8a274c93a1
      additionalProperties: false
      
    ConferenceDetail:
      type: object
      required:
        - conferenceName
        - startDate
        - endDate
      properties:
        conferenceName:
          type: string
          maxLength: 50
          minLength: 2
          pattern: ^[0-9a-zA-z\-]{2,50}$
        startDate:
          type: string
          format: date-time
          description: The ISO 8601 date and time in GMT when the conference will be happening
        endDate:
          type: string
          format: date-time
          description: The ISO 8601 date and time in GMT when the conference will be ending
        conferenceType:
          type: string
          enum:
            - testRoom
            - mainRoom
          description: Conference Type
          default: mainRoom
        mediaRegion:
          type: string
          enum:
            - gll
            - au1
            - br1
            - de1
            - ie1
            - in1
            - jp1
            - sg1
            - us1
            - us2
          description: Media Region to use for the conference https://www.twilio.com/docs/video/tutorials/video-regions-and-global-low-latency
          default: gll
        MMCWebcastURL:
          type: string
          format: uri
        statusCallbackURL:
          type: string
          format: uri
          description: Conference Events will be passed to this URL
          example: https://user:password@example.com/app/services/ciptex-telco/conference-callback
      additionalProperties: false
      
    ConferenceHeader:
      type: object
      readOnly: true
      required:
        - accountSid
        - bookingId
        - conferenceId
      properties:
        accountSid:
          type: string
          description: The SID of the Account that created the resource
          maxLength: 34
          minLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          readOnly: true
          example: AC5004b62bf34d23e0807028c16f7cd4a5
        bookingId:
          type: string
          description: The BID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^BI[0-9a-fA-F]{32}$
          readOnly: true
          example: BI9f52a65797f0db022ce35f8a274c93a1
        conferenceId:
          type: string
          description: The CID of the Conference
          maxLength: 34
          minLength: 34
          pattern: ^CI[0-9a-fA-F]{32}$
          readOnly: true
          example: CI9f52a65797f0dba42ce3ff8a274c93a1
      additionalProperties: false
      
    Conference:
      allOf:
        - $ref: "#/components/schemas/ConferenceHeader"
        - $ref: "#/components/schemas/ConferenceDetail"
        - $ref: "#/components/schemas/MetaDataLinks"
        
    MetaDataLinks:
      type: object
      required:
        - meta
        - links
      properties:
        meta:
          $ref: "#/components/schemas/MetaData"
        links:
          $ref: "#/components/schemas/Links"
      additionalProperties: false
      
    MetaData:
      type: object
      readOnly: true
      properties:
        dateCreated:
          type: string
          format: date-time
          description: The ISO 8601 date and time in GMT when the resource was created
        dateUpdated:
          type: string
          format: date-time
          description: The ISO 8601 date and time in GMT when the resource was last updated
        dialInNumbers:
          type: array
          items:
            type: string
            format: e164-number
            description: Array of Assigned Dial-In Numbers
        registrationUrl:
          type: string
          readOnly: true
          format: uri
          description: URL to participant registration for booking (Ciptex-generated)
          
    Links:
      type: object
      description: The URLs of related resources
      readOnly: true
      
    BookingDetail:
      type: object
      required:
        - event
        - callbacks
      properties:
        event:
          $ref: "#/components/schemas/Event"
        account:
          $ref: "#/components/schemas/Account"
        status:
          type: string
          enum:
            - pending
            - accepted
            - assigned
            - inactive
            - canceled
            - completed
          default: pending
        branding:
          $ref: "#/components/schemas/Branding"
        assignedHosts:
          description: Array of Assigned Host Identities
          type: array
          items:
            type: string
          default: []
        dialInGroups:
          type: array
          description: Regions to have Dial-In Numbers configured for
          items:
            type: string
            enum:
              - US
              - RestOfWorld
              - US-TollFree
              - RestOfWorld-TollFree
          default: []
        options:
          $ref: "#/components/schemas/Options"
        leader:
          $ref: "#/components/schemas/Contact"
        organizer:
          $ref: "#/components/schemas/Contact"
        notes:
          type: string
          description: Free form notes for use by booking organizers
        registrationFields:
          type: array
          items:
            $ref: "#/components/schemas/RegistrationField"
        callbacks:
          type: object
          properties:
            bookingCallbackUrl:
              description: |
                Callback used by Ciptex for passing updated booking data back to MMC Core. URL includes the Basic
                Authentication credentials (see example).
              type: string
              format: uri
              example: "https://user:password@edge.media-server.com/mmc/services/ciptex-telco/booking-callback"
            registrationNotificationUrl:
              description: |
                Endpoint used by Ciptex for passing information about conference call participants registering for a call
                to MMC Core. URL includes the Basic Authentication credentials (see example).
              type: string
              format: uri
              example: "https://user:password@edge.media-server.com/mmc/services/ciptex-telco/registration-notification"
            reportingUrl:
              description: |
                Endpoint used by Ciptex for passing reporting data about a finished conference call to MMC Core. URL
                includes the Basic Authentication credentials (see example).
              type: string
              format: uri
              example: "https://user:password@edge.media-server.com/mmc/services/ciptex-telco/reporting"
      additionalProperties: false
    BookingHeader:
      type: object
      readOnly: true
      required:
        - accountSid
        - bookingId
      properties:
        accountSid:
          type: string
          description: The SID of the Account that created the resource
          maxLength: 34
          minLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          readOnly: true
          example: AC5004b62bf34d23e0807028c16f7cd4a5
        bookingId:
          type: string
          description: The ID of the Booking
          maxLength: 34
          minLength: 34
          pattern: ^BI[0-9a-fA-F]{32}$
          readOnly: true
          example: BI9f52a65797f0db022ce35f8a274c93a1
      additionalProperties: false
      
    Booking:
      allOf:
      - $ref: "#/components/schemas/BookingHeader"
      - $ref: "#/components/schemas/BookingDetail"
      - $ref: "#/components/schemas/MetaDataLinks"
      
    RegistrationField:
      type: object
      required:
        - name
        - label
      properties:
        name:
          type: string
          description: Unique data name for the registration field (firstName, lastName, etc)
        type:
          $ref: "#/components/schemas/RegistrationFieldType"
        label:
          type: string
          description: Human-readable field label for registration form
        options:
          type: array
          items:
            $ref: "#/components/schemas/RegistrationFieldOption"
          description: Array of Registration Field Dropdown Option objects to display in order of listing.
        defaultValue:
          type: string
        isRequired:
          type: boolean
          description: Is an answer from the user required for this field?
          default: false
        inputValidation:
          $ref: "#/components/schemas/RegistrationFieldInputValidation"
        characterLimit:
          type: integer
          description: Maximum number of characters allowed for user input
          default: 200
      additionalProperties: false
      
    RegistrationFieldType:
      type: string
      enum:
        - text
        - select
        - checkbox
      description: >
        Registration Field Types:
          * `text` - plain text
          * `select` - Select box with at least one option. Options array would include key/value pair for each <option> value and display text.
          * `checkbox` - Checkbox which will have a value of either true or false
      default: text
      
    RegistrationFieldOption:
      type: object
      required:
        - value
        - label
      properties:
        value:
          type: string
          description: Unique value for option tag
        label:
          type: string
          description: Human-readable field text for dropdown option
      additionalProperties: false
      
    RegistrationFieldInputValidation:
      enum:
        - uri
        - phoneNumber
        - email
      type: string
      description: >
        Registration Field Input Validation:
          * `uri` - universal resource identifier (fully qualified url)
          * `phoneNumber` - phone number conforms to e.164 format: https://www.twilio.com/docs/glossary/what-e164
          * `email` - input text must be in "email_handle@domain" format
          
    Options:
      type: object
      properties:
        hasQaSession:
          type: boolean
          description: Q and A
          default: false
        hasVideo:
          type: boolean
          description: If the booking has a video component
          default: false
        language:
          type: string
          description: Available language (2 letter, ISO 639-1)
          default: en
      additionalProperties: false
      
    Branding:
      type: object
      properties:
        mohUrls:
          type: array
          items:
            type: string
            format: uri
            example: http://com.twilio.music.guitars.s3.amazonaws.com/Pitx_-_Long_Winter.mp3
            description: URLs of Sound Files to be played while users wait
        virtualBackgroundUrls:
          type: array
          items:
            type: string
            format: uri
            example: https://example.com/virtualBackground.png
            description: URLs of Virtual Backgrounds to be available for use
        lobbyImgUrl:
          type: string
          format: uri
          example: https://example.com/lobbyImgUrl.png
          description: URL for Lobby Waiting Screen to be displayed on Interface
        logoUrl:
          type: string
          format: uri
          example: https://example.com/logo.jpg
          description: URL for Logo to be displayed on Interface
      additionalProperties: false
      
  securitySchemes:
    BasicAuthorizer:
      description: |
          Basic Authorization (Recommended):
          ```curl
          curl -X GET -H "Content-Type: application/json" -u username:password "https://notified-booking-api.london.ciptex.io"
          ```
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authorizer:
        identitySource: "$request.header.Authorization"
        authorizerUri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}/invocations"
            - functionArn:
                Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - AuthFunctionArn
        authorizerCredentials:
          Fn::FindInMap: 
                  - RegionMap
                  - Ref: AWS::Region
                  - AuthorizerInvokeArn
        authorizerPayloadFormatVersion: "2.0"
        authorizerResultTtlInSeconds: 0
        type: "request"
        enableSimpleResponses: true
x-amazon-apigateway-request-validators:
  full:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: full