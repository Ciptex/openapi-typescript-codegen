#---
#title: Ciptex Race Content API
#description: API for Adding Content to Race
#---
openapi: "3.0.1"
info:
  title: "content-api"
  version: "1.0"
  description: "The Ciptex Race Content API allows you to add Content for use from [Ciptex Race](https://ciptex.com/race), [Twilio Flex](https://www.twilio.com/flex) and [Twilio Studio](https://www.twilio.com/studio)"
  termsOfService: https://www.ciptex.com/legal/race-terms
  contact: 
    name: API Support
    url: https://support.ciptex.com
servers:
  - url: https://content-api.{edge}.ciptex.com
    description: Global Low Latency Endpoint
    variables:
      edge:
        default: gll
        description: Ciptex Ege Region
        enum:
          - gll
          - london
          - frankfurt
          - ashburn
          - umatilla
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
x-tagGroups:
  - name: Content API
    tags:
      - Content
x-maturity:
  - description: This product is Beta.
    name: Beta
paths:
  /content:
    get:
      summary: "List Content"
      description: "Retrieve a list of Content"
      operationId: "ListContent"
      tags:
        - Content
      parameters:
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/LastKey"
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Content'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [listContentFunction, Arn]
        connectionType: "INTERNET"
    post:
      summary: "Create New Content"
      description: "Create a new Content"
      operationId: "CreateContent"
      tags:
        - Content
      x-maturity:
        - Beta
      security:
        - BasicAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentDetail'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Content"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [createContentFunction, Arn]
        connectionType: "INTERNET"
  /content/{ContentId}:
    get:
      summary: Fetch Content
      description: "Get a specific Content"
      tags:
        - Content
      security:
        - BasicAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ContentId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Content'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [getContentFunction, Arn]
        connectionType: "INTERNET"
    patch:
      summary: "Update Content"
      description: "Update Content"
      operationId: "UpdateContent"
      tags:
        - Content
      security:
        - BasicAuthorizer: []
      x-maturity:
        - Beta
      parameters:
        - $ref: "#/components/parameters/ContentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentDetail'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Content"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [updateContentFunction, Arn]
        connectionType: "INTERNET"
    delete:
      summary: "Remove Content"
      description: "Remove Content"
      operationId: "RemoveContent"
      tags:
        - Content
      security:
        - BasicAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ContentId"
      responses:
        204:
          description: No Content
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        500:
          $ref: "#/components/responses/500"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [deleteContentFunction, Arn]
        connectionType: "INTERNET"
  /.well-known/health-check:
    get:
      summary: "API Health Check"
      description: "API Health Check"
      tags:
        - Health Check
      x-maturity:
        - Beta
      responses:
        204:
          description: No Content
        405:
          $ref: "#/components/responses/405"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}:live/invocations"
            - functionArn:
                Fn::GetAtt: [healthCheckFunction, Arn]
        connectionType: "INTERNET"
components:
  parameters:
    PageSize:
      in: query
      name: pageSize
      schema:
        type: number
      description: Number of Items to return
      example: 10
    LastKey:
      in: query
      name: lastKey
      schema:
        type: string
      description: Last Key that was evaluated
      example: CTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    ContentId:
      in: path
      name: ContentId
      schema:
        type: string
        pattern: ^CT[0-9a-fA-F]{32}$
        maxLength: 34
        minLength: 34
      required: true
      description: The ID of the Content
      allowReserved: false
      allowEmptyValue: false
      example: CTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  responses:
    400:
      description: Bad Request
    401:
      description: Unauthorized
      headers:
        WWW_Authenticate:
          schema:
            type: string
    404:
      description: Not Found
    405:
      description: Method Not Found
      headers:
        Allow:
          schema:
            type: string
    500:
      description: Internal Server Error
  schemas:
    AccountSid:
      $ref: "models.yml#/components/schemas/AccountSid"
    ContentId:
      $ref: "models.yml#/components/schemas/ContentId"
    ContentDetail:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Content Descriptive Name
        tags:
          type: array
          description: Content Tags
          items:
            type: string
        type:
          type: string
          enum:
            - text
        content:
          oneOf:
            - $ref: "#/components/schemas/TextType"
      additionalProperties: false
    TextType:
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Content:
      allOf:
        - $ref: "#/components/schemas/ContentHeader"
        - $ref: "#/components/schemas/ContentDetail"
        - $ref: "#/components/schemas/MetaDataLinks"
    ContentHeader:
      type: object
      properties:
        accountSid:
          $ref: "#/components/schemas/AccountSid"
        contentId:
          $ref: "#/components/schemas/ContentId"
      additionalProperties: false
    MetaDataLinks:
      type: object
      readOnly: true
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/MetaData"
      additionalProperties: false
    MetaData:
      type: object
      readOnly: true
      properties:
        dateCreated:
          type: string
          format: date-time
          description: The ISO 8601 date and time in GMT when the resource was created
        dateUpdated:
          type: string
          format: date-time
          description: The ISO 8601 date and time in GMT when the resource was last updated
  securitySchemes:
    BasicAuthorizer:
      description: |
        Authorization Header or token query string (for use in Twilio Studio):
          * **Basic Auth using Twilio AccountSid and Auth Token**
          
          Basic Auth (Recommended):
          ```curl
          curl -X GET -H "Content-Type: application/json" -u ACXXXXXXX:YOUR_TWILIO_AUTH_TOKEN "https://content-api.london.ciptex.com"
          ```

          Basic Auth as Querystring Parameter:
          ```curl
          curl -X GET -H "Content-Type: application/json" "https://content-api.london.ciptex.com?token=Basic+YOUR_BASE64_ENCODED_CREDENTIALS"
          ```

          * **Flex Auth using Twilio AccountSid and Flex Token**
          
          Bearer Token in Authorization Header (Recommended):
          ```curl
          curl -X GET -H "Content-Type: application/json" -H "Authorization: Bearer ACXXXXXXX:YOUR_FLEX_AUTH_TOKEN" "https://content-api.london.ciptex.com"
          ```

          Bearer Token as Querystring Parameter:
          ```curl
          curl -X GET -H "Content-Type: application/json" "https://content-api.london.ciptex.com?token=Flex+YOUR_FLEX_AUTH_TOKEN"
          ```
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authorizer:
        authorizerUri:
          Fn::Sub:
            - "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionArn}/invocations"
            - functionArn: 
                Fn::FindInMap: 
                  - RegionMap
                  - Ref: AWS::Region 
                  - AuthFunctionArn
        authorizerCredentials:
          Fn::FindInMap: 
                  - RegionMap
                  - Ref: AWS::Region
                  - AuthorizerInvokeArn
        authorizerPayloadFormatVersion: "2.0"
        authorizerResultTtlInSeconds: 0
        type: "request"
        enableSimpleResponses: true
x-amazon-apigateway-cors:
  allowMethods:
    - "GET"
    - "POST"
    - "PATCH"
    - "PUT"
    - "DELETE"
    - "OPTIONS"
  allowHeaders:
    - "authorization"
    - "content-type"
  maxAge: 300
  allowCredentials: false
  allowOrigins:
    - "http://localhost:3000"
    - "https://*"
x-amazon-apigateway-importexport-version: "1.0"